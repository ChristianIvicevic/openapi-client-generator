// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fixtures compiles the expanded petstore schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
export type Error = {
  readonly code: number;
  readonly message: string;
};
export type NewPet = {
  readonly name: string;
  readonly tag?: string;
};
export type Pet = NewPet & {
  readonly id: number;
};
"
`;

exports[`Fixtures compiles the expanded petstore schema 2`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios';
import type { NewPet, Pet } from './schemas';
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const findPets = async (
  parameters: {
    /**
     * tags to filter by
     */
    readonly tags?: readonly string[];
    /**
     * maximum number of results to return
     */
    readonly limit?: number;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pet[]>('/pets', {
    ...config,
    params: {
      tags: parameters.tags,
      limit: parameters.limit,
    },
  });
/**
 * @param requestBody The HTTP request content sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const addPet = async (
  requestBody: NewPet,
  config?: AxiosRequestConfig,
) => axios.post<Pet>('/pets', requestBody, config);
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const findPetById = async (
  parameters: {
    /**
     * ID of pet to fetch
     */
    readonly id: number;
  },
  config?: AxiosRequestConfig,
) => axios.get<Pet>(\`/pets/\${parameters.id}\`, config);
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const deletePet = async (
  parameters: {
    /**
     * ID of pet to delete
     */
    readonly id: number;
  },
  config?: AxiosRequestConfig,
) => axios.delete<void>(\`/pets/\${parameters.id}\`, config);
"
`;

exports[`Fixtures compiles the link example schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
export type Pullrequest = {
  readonly author?: User;
  readonly id?: number;
  readonly repository?: Repository;
  readonly title?: string;
};
export type Repository = {
  readonly owner?: User;
  readonly slug?: string;
};
export type User = {
  readonly username?: string;
  readonly uuid?: string;
};
"
`;

exports[`Fixtures compiles the link example schema 2`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios';
import type { Pullrequest, Repository, User } from './schemas';
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const getRepositoriesByOwner = async (
  parameters: {
    readonly username: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Repository[]>(
    \`/2.0/repositories/\${parameters.username}\`,
    config,
  );
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const getRepository = async (
  parameters: {
    readonly username: string;
    readonly slug: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Repository>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}\`,
    config,
  );
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const getPullRequestsByRepository = async (
  parameters: {
    readonly username: string;
    readonly slug: string;
    readonly state?: 'open' | 'merged' | 'declined';
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pullrequest[]>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests\`,
    {
      ...config,
      params: {
        state: parameters.state,
      },
    },
  );
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const getPullRequestsById = async (
  parameters: {
    readonly username: string;
    readonly slug: string;
    readonly pid: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Pullrequest>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests/\${parameters.pid}\`,
    config,
  );
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const mergePullRequest = async (
  parameters: {
    readonly username: string;
    readonly slug: string;
    readonly pid: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.post<void>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests/\${parameters.pid}/merge\`,
    undefined,
    config,
  );
/**
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const getUserByName = async (
  parameters: {
    readonly username: string;
  },
  config?: AxiosRequestConfig,
) => axios.get<User>(\`/2.0/users/\${parameters.username}\`, config);
"
`;

exports[`Fixtures compiles the petstore schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
export type Error = {
  readonly code: number;
  readonly message: string;
};
export type Pet = {
  readonly id: number;
  readonly name: string;
  readonly tag?: string;
};
export type Pets = readonly Pet[];
"
`;

exports[`Fixtures compiles the petstore schema 2`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */
import type { AxiosRequestConfig } from 'axios';
import axios from 'axios';
import type { Pet, Pets } from './schemas';
/**
 * List all pets
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const listPets = async (
  parameters: {
    /**
     * How many items to return at one time (max 100)
     */
    readonly limit?: number;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Pets>('/pets', {
    ...config,
    params: {
      limit: parameters.limit,
    },
  });
/**
 * Create a pet
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const createPets = async (config?: AxiosRequestConfig) =>
  axios.post<void>('/pets', undefined, config);
/**
 * Info for a specific pet
 * @param parameters The HTTP request (path, query, header and cookie) parameters sent to the server.
 * @param config A custom \`AxiosRequestConfig\` object that is used to override the global configuration for this request. This value is optional.
 */
export const showPetById = async (
  parameters: {
    /**
     * The id of the pet to retrieve
     */
    readonly petId: string;
  },
  config?: AxiosRequestConfig,
) => axios.get<Pet>(\`/pets/\${parameters.petId}\`, config);
"
`;
