// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Handlebars Generator Integration compiles the expanded petstore schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */

import axios, { AxiosRequestConfig } from 'axios';
import type { Error, NewPet, Pet } from './schemas';

/**
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const addPet = async (
  requestBody: NewPet,
  config?: AxiosRequestConfig,
) => axios.post<Pet | Error>(\`/pets\`, requestBody, config);

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const deletePet = async (
  parameters: {
    /**
     * ID of pet to delete
     */
    id: number;
  },
  config?: AxiosRequestConfig,
) => axios.delete<void | Error>(\`/pets/\${parameters.id}\`, config);

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const findPetById = async (
  parameters: {
    /**
     * ID of pet to fetch
     */
    id: number;
  },
  config?: AxiosRequestConfig,
) => axios.get<Pet | Error>(\`/pets/\${parameters.id}\`, config);

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const findPets = async (
  parameters: {
    /**
     * tags to filter by
     */
    tags: readonly string[];
    /**
     * maximum number of results to return
     */
    limit: number;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pet[] | Error>(\`/pets\`, {
    ...config,
    params: {
      tags: parameters.tags,
      limit: parameters.limit,
    },
  });
"
`;

exports[`Handlebars Generator Integration compiles the link example schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */

import axios, { AxiosRequestConfig } from 'axios';
import type { Pullrequest, Repository, User } from './schemas';

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getPullRequestsById = async (
  parameters: {
    /**
     *
     */
    username: string;
    /**
     *
     */
    slug: string;
    /**
     *
     */
    pid: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Pullrequest>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests/\${parameters.pid}\`,
    config,
  );

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getPullRequestsByRepository = async (
  parameters: {
    /**
     *
     */
    username: string;
    /**
     *
     */
    slug: string;
    /**
     *
     */
    state: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pullrequest[]>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests\`,
    {
      ...config,
      params: {
        state: parameters.state,
      },
    },
  );

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getRepositoriesByOwner = async (
  parameters: {
    /**
     *
     */
    username: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Repository[]>(
    \`/2.0/repositories/\${parameters.username}\`,
    config,
  );

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getRepository = async (
  parameters: {
    /**
     *
     */
    username: string;
    /**
     *
     */
    slug: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Repository>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}\`,
    config,
  );

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getUserByName = async (
  parameters: {
    /**
     *
     */
    username: string;
  },
  config?: AxiosRequestConfig,
) => axios.get<User>(\`/2.0/users/\${parameters.username}\`, config);

/**
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const mergePullRequest = async (
  parameters: {
    /**
     *
     */
    username: string;
    /**
     *
     */
    slug: string;
    /**
     *
     */
    pid: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.post<void>(
    \`/2.0/repositories/\${parameters.username}/\${parameters.slug}/pullrequests/\${parameters.pid}/merge\`,
    undefined,
    config,
  );
"
`;

exports[`Handlebars Generator Integration compiles the petstore schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */

import axios, { AxiosRequestConfig } from 'axios';
import type { Error, Pet, Pets } from './schemas';

/**
 * Create a pet
 * @param config Overrides of the axios configuration for this request
 */
export const createPets = async (config?: AxiosRequestConfig) =>
  axios.post<void | Error>(\`/pets\`, undefined, config);

/**
 * List all pets
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const listPets = async (
  parameters: {
    /**
     * How many items to return at one time (max 100)
     */
    limit: number;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<Pets | Error>(\`/pets\`, {
    ...config,
    params: {
      limit: parameters.limit,
    },
  });

/**
 * Info for a specific pet
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const showPetById = async (
  parameters: {
    /**
     * The id of the pet to retrieve
     */
    petId: string;
  },
  config?: AxiosRequestConfig,
) => axios.get<Pet | Error>(\`/pets/\${parameters.petId}\`, config);
"
`;

exports[`Handlebars Generator Integration compiles the uspto schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */

import axios, { AxiosRequestConfig } from 'axios';
import type { DataSetList } from './schemas';

/**
 * List available data sets
 * @param config Overrides of the axios configuration for this request
 */
export const listDataSets = async (config?: AxiosRequestConfig) =>
  axios.get<DataSetList>(\`/\`, config);

/**
 * Provides the general information about the API and the list of fields that
 * can be used to query the dataset.
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const listSearchableFields = async (
  parameters: {
    /**
     * Name of the dataset.
     */
    dataset: string;
    /**
     * Version of the dataset.
     */
    version: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<string>(
    \`/\${parameters.dataset}/\${parameters.version}/fields\`,
    config,
  );

/**
 * Provides search capability for the data set with the given search criteria.
 * @param parameters Parameters associated with this request
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const performSearch = async (
  parameters: {
    /**
     * Version of the dataset.
     */
    version: string;
    /**
     * Name of the dataset. In this case, the default value is oa_citations
     */
    dataset: string;
  },
  requestBody: unknown,
  config?: AxiosRequestConfig,
) =>
  axios.post<readonly object[]>(
    \`/\${parameters.dataset}/\${parameters.version}/records\`,
    requestBody,
    config,
  );
"
`;
