// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Handlebars Generator Integration compiles the petstore schema 1`] = `
"/* eslint-disable */
/* THIS FILE HAS BEEN GENERATED AUTOMATICALLY - DO NOT EDIT IT MANUALLY */

import axios, { AxiosRequestConfig } from 'axios';
import { ApiResponse, Order, Pet, User } from './types';

/**
 * Add a new pet to the store
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const addPet = async (requestBody: Pet, config?: AxiosRequestConfig) =>
  axios.post<Pet>(\`/pet\`, requestBody, config);

/**
 * Create user
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const createUser = async (
  requestBody: User,
  config?: AxiosRequestConfig,
) => axios.post<User>(\`/user\`, requestBody, config);

/**
 * Creates list of users with given input array
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const createUsersWithListInput = async (
  requestBody: readonly User[],
  config?: AxiosRequestConfig,
) => axios.post<User | void>(\`/user/createWithList\`, requestBody, config);

/**
 * Delete purchase order by ID
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const deleteOrder = async (
  parameters: {
    /**
     * ID of the order that needs to be deleted
     */
    orderId: number;
  },
  config?: AxiosRequestConfig,
) => axios.delete<void>(\`/store/order/\${parameters.orderId}\`, config);

/**
 * Deletes a pet
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const deletePet = async (
  parameters: {
    /**
     *
     */
    api_key: string;
    /**
     * Pet id to delete
     */
    petId: number;
  },
  config?: AxiosRequestConfig,
) => axios.delete<void>(\`/pet/\${parameters.petId}\`, config);

/**
 * Delete user
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const deleteUser = async (
  parameters: {
    /**
     * The name that needs to be deleted
     */
    username: string;
  },
  config?: AxiosRequestConfig,
) => axios.delete<void>(\`/user/\${parameters.username}\`, config);

/**
 * Finds Pets by status
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const findPetsByStatus = async (
  parameters: {
    /**
     * Status values that need to be considered for filter
     */
    status: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pet[]>(\`/pet/findByStatus\`, {
    ...config,
    params: {
      status: parameters.status,
    },
  });

/**
 * Finds Pets by tags
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const findPetsByTags = async (
  parameters: {
    /**
     * Tags to filter by
     */
    tags: readonly string[];
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<readonly Pet[]>(\`/pet/findByTags\`, {
    ...config,
    params: {
      tags: parameters.tags,
    },
  });

/**
 * Returns pet inventories by status
 * @param config Overrides of the axios configuration for this request
 */
export const getInventory = async (config?: AxiosRequestConfig) =>
  axios.get<object>(\`/store/inventory\`, config);

/**
 * Find purchase order by ID
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getOrderById = async (
  parameters: {
    /**
     * ID of order that needs to be fetched
     */
    orderId: number;
  },
  config?: AxiosRequestConfig,
) => axios.get<Order>(\`/store/order/\${parameters.orderId}\`, config);

/**
 * Find pet by ID
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getPetById = async (
  parameters: {
    /**
     * ID of pet to return
     */
    petId: number;
  },
  config?: AxiosRequestConfig,
) => axios.get<Pet>(\`/pet/\${parameters.petId}\`, config);

/**
 * Get user by user name
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const getUserByName = async (
  parameters: {
    /**
     * The name that needs to be fetched. Use user1 for testing.
     */
    username: string;
  },
  config?: AxiosRequestConfig,
) => axios.get<User>(\`/user/\${parameters.username}\`, config);

/**
 * Logs user into the system
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const loginUser = async (
  parameters: {
    /**
     * The user name for login
     */
    username: string;
    /**
     * The password for login in clear text
     */
    password: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.get<string>(\`/user/login\`, {
    ...config,
    params: {
      username: parameters.username,
      password: parameters.password,
    },
  });

/**
 * Logs out current logged in user session
 * @param config Overrides of the axios configuration for this request
 */
export const logoutUser = async (config?: AxiosRequestConfig) =>
  axios.get<void>(\`/user/logout\`, config);

/**
 * Place an order for a pet
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const placeOrder = async (
  requestBody: Order,
  config?: AxiosRequestConfig,
) => axios.post<Order>(\`/store/order\`, requestBody, config);

/**
 * Update an existing pet
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const updatePet = async (
  requestBody: Pet,
  config?: AxiosRequestConfig,
) => axios.put<Pet>(\`/pet\`, requestBody, config);

/**
 * Updates a pet in the store with form data
 * @param parameters Parameters associated with this request
 * @param config Overrides of the axios configuration for this request
 */
export const updatePetWithForm = async (
  parameters: {
    /**
     * ID of pet that needs to be updated
     */
    petId: number;
    /**
     * Name of pet that needs to be updated
     */
    name: string;
    /**
     * Status of pet that needs to be updated
     */
    status: string;
  },
  config?: AxiosRequestConfig,
) =>
  axios.post<void>(\`/pet/\${parameters.petId}\`, undefined, {
    ...config,
    params: {
      name: parameters.name,
      status: parameters.status,
    },
  });

/**
 * Update user
 * @param parameters Parameters associated with this request
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const updateUser = async (
  parameters: {
    /**
     * name that need to be deleted
     */
    username: string;
  },
  requestBody: User,
  config?: AxiosRequestConfig,
) => axios.put<void>(\`/user/\${parameters.username}\`, requestBody, config);

/**
 * uploads an image
 * @param parameters Parameters associated with this request
 * @param requestBody The payload to send with this request
 * @param config Overrides of the axios configuration for this request
 */
export const uploadFile = async (
  parameters: {
    /**
     * ID of pet to update
     */
    petId: number;
    /**
     * Additional Metadata
     */
    additionalMetadata: string;
  },
  requestBody: string,
  config?: AxiosRequestConfig,
) =>
  axios.post<ApiResponse>(\`/pet/\${parameters.petId}/uploadImage\`, requestBody, {
    ...config,
    params: {
      additionalMetadata: parameters.additionalMetadata,
    },
  });
"
`;
