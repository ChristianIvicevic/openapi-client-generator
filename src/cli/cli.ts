/* istanbul ignore file */

import { existsSync, readFileSync, writeFileSync } from 'fs';
import { compileUsingHandlebars } from 'generators/handlebars/generator';
import { parseYaml } from 'parser/parser';
import { dirname } from 'path';
import { getLogger } from 'utils/logging';
import yargs from 'yargs';

const yargsObject = yargs
  .usage('Usage: $0 -i [INPUT] -o [OUTPUT] -t [TYPES]')
  .options({
    i: {
      alias: 'input',
      type: 'string',
      description: 'Input file',
      demandOption: true,
    },
    o: {
      alias: 'output',
      type: 'string',
      description: 'Output file',
      demandOption: true,
    },
    t: {
      alias: 'types',
      type: 'string',
      description:
        "Relative path to the file including all generated schema types - most likely the file generated by 'restful-react'",
      demandOption: true,
    },
    v: {
      alias: 'verbose',
      type: 'boolean',
      description: 'Run with verbose logging',
      conflicts: ['d'],
    },
    d: {
      alias: 'debug',
      type: 'boolean',
      description: 'Run with even more verbose logging',
      conflicts: ['v'],
    },
    version: {
      type: 'boolean',
      description: 'Prints the current compiler version',
    },
    help: {
      type: 'boolean',
      description: 'Outputs this message',
    },
  })
  .wrap(80);

void (async () => {
  const {
    argv: { i: inputFile, o: outputFile, t: typesPath, v: verbose, d: debug },
  } = yargsObject;
  process.env.OCG_LOG_LEVEL =
    // eslint-disable-next-line no-nested-ternary
    verbose === true ? 'verbose' : debug === true ? 'debug' : 'info';

  const logger = getLogger();

  if (!existsSync(inputFile)) {
    logger.error(`The input file '${inputFile}' does not exist`);
    process.exit(1);
  }

  const parentDirectory = dirname(outputFile);

  if (!existsSync(parentDirectory)) {
    logger.error(`The output directory '${parentDirectory}' does not exist`);
    process.exit(1);
  }

  logger.info(`Parsing OpenAPIV3 document at '${inputFile}'`);

  try {
    const yamlContent = readFileSync(inputFile).toString();
    const document = parseYaml(yamlContent);
    const compiledOutput = await compileUsingHandlebars(document, {
      typesPath,
    });
    writeFileSync(outputFile, compiledOutput);
  } catch (e: unknown) {
    logger.error(debug === true ? e : String(e));
    process.exit(1);
  }

  logger.info('ðŸŽ‰ Compilation finished!');
})();
